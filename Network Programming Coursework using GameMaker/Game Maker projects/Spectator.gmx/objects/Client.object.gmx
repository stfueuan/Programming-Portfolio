<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var Type, IPAddress, Port;
Type = network_socket_tcp; //create a TCP socket
IPAddress = "127.0.0.1"; //Connect to 'this' pc
Port = 5555;
Socket = network_create_socket(Type); //create the socket...
isConnected = network_connect(Socket, IPAddress, Port); //are we connected?

var Size, Type, Alignment;
Size = 1024; //set original size of buffer
//buffer cannot change size
//other types include buffer_grow (grows to include info above size in bytes but permantly stays at the new size)
//buffer_wrap (information exceeding size will overwrite first elements
//buffer_fast (stripped down buffer_fixed to only allow buffer_u8 and buffer_s8 read/write types - very little overhead)
Type = buffer_fixed; 
Alignment = 1; //...?
Buffer = buffer_create(Size, Type, Alignment); //create the buffer detailed above

//Ask the server for the current time, for synchronisation 
intialTime = current_time;
buffer_seek(Buffer, buffer_seek_start, 0);
buffer_write(Buffer, buffer_u8, 1); //message ID
buffer_write(Buffer, buffer_u32, current_time);
network_send_packet(Socket, Buffer, buffer_tell(Buffer)); 

//other necessary variables
MSGID = 0;
latency = 0;
delta = 0;
newServerTime = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var type_event = ds_map_find_value(async_load, "type"); //get the type packet from the information being read
switch(type_event) {
case network_type_data :
    var buffer = ds_map_find_value(async_load, "buffer"); //find buffer in memory
    buffer_seek(buffer, buffer_seek_start, 0); //read the buffer from the beginning
    MSGID = buffer_read(buffer, buffer_u8); //get message ID
    ReceivedPacket(buffer); //read message
    break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//networking doo-hickeys must be cleared up like pointers
network_destroy(Socket);
buffer_delete(Buffer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Server creation code taken from this tutorial: http://gmc.yoyogames.com/index.php?showtopic=604116 accessed 29/11/14, written by FatalSheep? 17 December 2013

var Type, Port, MaxClients;
Type = network_socket_tcp; //set socket type to be TCP
Port = 5555; //port for server to broadcast from
MaxClients = 32; //this is how many clients can be connected simultaneously, although more than this can connect
Server = network_create_server(Type, Port, MaxClients); //create server detailed above

var Size, Type, Alignment;
Size = 1024; //maximum buffer size
Type = buffer_fixed; //buffer cannot exceed detailed size
Alignment = 1; //byte alignment
Buffer = buffer_create(Size, Type, Alignment);

SocketList = ds_list_create(); //create a list of sockets/clients

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var balls = instance_number(pegDestroyer); //get number of balls on screen

var buffer = peggleServer.Buffer;
var socketList = peggleServer.SocketList;

if(balls &lt; 1)
{
    with(instance_create(dispenser.x, dispenser.y, pegDestroyer)) //create instance and use its local variables in this block
    {
        physics_apply_impulse(dispenser.x, dispenser.y, lengthdir_x(100, point_direction(x, y, mouse_x, mouse_y)), lengthdir_y(100, point_direction(x, y, mouse_x, mouse_y)));
        
        for(var i = 0; i &lt; ds_list_size(socketList); i++)
        {        
            buffer_seek(buffer, buffer_seek_start, 0);
            buffer_write(buffer, buffer_u8, 3); //message ID
            buffer_write(buffer, buffer_string, "pegDestroyer"); //send ball name
            buffer_write(buffer, buffer_u32, x); //send initial x position
            buffer_write(buffer, buffer_u32, y); //send initial y position
            buffer_write(buffer, buffer_u32, dispenser.image_angle); //send direction of motion 
            buffer_write(buffer, buffer_u32, phy_speed); //send intitial speed as dictated by box2D
            buffer_write(buffer, buffer_u32, current_time); //send current server time
            ReceivedPacket(buffer, ds_list_find_value(socketList, i));
        }
    }
}
 

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//REMEMBER: Client's async_map 'id' will return TCP or UDP socket, Server's async_map 'id' will return the socket of the client

var type_event = ds_map_find_value(async_load, "type"); //async_load retrieves the type of event from the information being received
switch(type_event){
case network_type_connect:
    var socket = ds_map_find_value(async_load, "socket"); //get the socket ID
    ds_list_add(SocketList, socket); //add new socket to list of sockets
    break;
    
case network_type_disconnect:
    var socket = ds_map_find_value(async_load, "socket"); //get the socket ID
    var findSocket = ds_list_find_index(SocketList, socket); //find the current socket from the list
    if(findSocket &gt;= 0)
    {
        ds_list_delete(SocketList, findSocket); //let's get rid of that useless socket
    }
    break;

case network_type_data:
    //what information are we receiving/sending?
    var buffer = ds_map_find_value(async_load, "buffer"); //get packet buffer
    var socket = ds_map_find_value(async_load, "id"); //get packet ID
    buffer_seek(buffer, buffer_seek_start, 0); //start read/write at beginning of buffer
    ReceivedPacket(buffer, socket);
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//networking stuff must be cleaned up like pointers
network_destroy(Server);
buffer_delete(Buffer);
ds_list_destroy(SocketList);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(5, 5, "Server Status: " + string(Server &gt;= 0));
draw_text(5, 20, "Total Clients: " + string(ds_list_size(SocketList)));

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//create pegs in following positions and send relevant information to clients

instance_create(64, 160, peg1);
instance_create(192, 160, peg2);
instance_create(320, 160, peg3);
instance_create(448, 160, peg4);
instance_create(576, 160, peg5);
instance_create(128, 256, peg6);
instance_create(256, 256, peg7);
instance_create(384, 256, peg8);
instance_create(512, 256, peg9);
instance_create(576, 352, peg10);
instance_create(64, 352, peg11);
instance_create(192, 352, peg12);
instance_create(320, 352, peg13);
instance_create(448, 352, peg14);

for(var i = 0; i &lt; ds_list_size(SocketList); i++)
{
    for(var j = 1; j &lt; 15; j++)
    {
        SendPegInformation(Buffer, "peg" + string(j), ds_list_find_value(SocketList, i));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

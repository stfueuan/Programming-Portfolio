<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>ball</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = room_speed/5; //set alarm timer to be half a second - room speed sets the number of frames to be rendered each second
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var buffer = peggleServer.Buffer;
var socketList = peggleServer.SocketList;

buffer_seek(buffer, buffer_seek_start, 0); //start writing to buffer from beginning
buffer_write(buffer, buffer_u8, 6); //message ID
buffer_write(buffer, buffer_u32, x); //ball x position
buffer_write(buffer, buffer_u32, y); //ball y position
buffer_write(buffer, buffer_u32, phy_speed); //ball speed determined by box2D
buffer_write(buffer, buffer_u32, current_time); //current server time
for(var i = 0; i &lt; ds_list_size(socketList); i++) //must iterate through list of sockets
{
    ReceivedPacket(buffer, ds_list_find_value(socketList, i));
}

alarm[0] = room_speed/5; //reset alarm timer
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(y &gt; room_height)
{    
    instance_destroy(); //destroy the instance of the ball
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="peggleWall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Simple comment is needed to cause collision event to occur
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="peg">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(other)
{
    isAlive = false;
    instance_destroy(); //destroy the peg
}

buffer = peggleServer.Buffer;
socketList = peggleServer.SocketList;

buffer_seek(buffer, buffer_seek_start, 0);
buffer_write(buffer, buffer_u8, 5); //message ID
buffer_write(buffer, buffer_u32, x); //ball x collision position
buffer_write(buffer, buffer_u32, y); //ball y collision position
buffer_write(buffer, buffer_string, object_get_name(other.object_index)); //which peg did you collide with?
buffer_write(buffer, buffer_u32, current_time); //current server time
for(var i = 0; i &lt; ds_list_size(socketList); i++)
{
    ReceivedPacket(buffer, ds_list_find_value(socketList, i));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>-1</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>63.75,63.5</point>
    <point>13,64</point>
  </PhysicsShapePoints>
</object>
